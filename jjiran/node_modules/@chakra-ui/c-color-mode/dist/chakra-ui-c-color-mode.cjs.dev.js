'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var vue = require('vue');
var utils = require('@chakra-ui/utils');

/** Injects color mode into component instance */
var useColorMode = function useColorMode() {
  var _colorMode = vue.inject("$chakraColorMode");

  var colorMode = vue.isRef(_colorMode) ? _colorMode : vue.ref(_colorMode);

  var toggleColorMode = function toggleColorMode() {
    if (colorMode.value === "light") {
      colorMode.value = "dark";
    } else {
      colorMode.value = "light";
    }
  };

  return {
    colorMode: colorMode,
    toggleColorMode: toggleColorMode
  };
};
/**
 * Change value based on color mode.
 *
 * @param lightValue the light mode value
 * @param darkValue the dark mode value
 *
 * @example
 *
 * ```js
 * const Icon = useColorModeValue(MoonIcon, SunIcon)
 * ```
 */

function useColorModeValue(lightValue, darkValue) {
  var _useColorMode = useColorMode(),
      colorMode = _useColorMode.colorMode;

  var modeValue = vue.ref();
  vue.watchEffect(function () {
    modeValue.value = colorMode.value === "dark" ? darkValue : lightValue;
  });
  return modeValue;
}

var hasSupport = function hasSupport() {
  return typeof Storage !== "undefined";
};

var storageKey = "chakra-ui-color-mode";

/**
 * Simple object to handle read-write to localStorage
 */
var localStorageManager = {
  get: function get(init) {
    if (!hasSupport()) return init;

    try {
      var _value = localStorage.getItem(storageKey);

      return _value != null ? _value : init;
    } catch (error) {
      if (utils.__DEV__) {
        console.log(error);
      }

      return init;
    }
  },
  set: function set(value) {
    if (!hasSupport()) return;

    try {
      localStorage.setItem(storageKey, value);
    } catch (error) {
      if (utils.__DEV__) {
        console.log(error);
      }
    }
  },
  type: "localStorage"
};
/**
 * Simple object to handle read-write to cookies
 */

var cookieStorageManager = function cookieStorageManager(cookies) {
  if (cookies === void 0) {
    cookies = "";
  }

  return {
    get: function get(init) {
      var match = cookies.match(new RegExp("(^| )" + storageKey + "=([^;]+)"));

      if (match) {
        return match[2];
      }

      return init;
    },
    set: function set(value) {
      document.cookie = storageKey + "=" + value + "; max-age=31536000; path=/";
    },
    type: "cookie"
  };
};

exports.cookieStorageManager = cookieStorageManager;
exports.localStorageManager = localStorageManager;
exports.storageKey = storageKey;
exports.useColorMode = useColorMode;
exports.useColorModeValue = useColorModeValue;
