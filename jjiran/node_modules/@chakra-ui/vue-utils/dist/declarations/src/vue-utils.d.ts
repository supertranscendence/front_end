import { Slots, VNode } from "vue";
export interface CreateContextOptions {
    /**
     * If `true`, Vue will throw if context is `null` or `undefined`
     * In some cases, you might want to support nested context, so you can set it to `false`
     */
    strict?: boolean;
    /**
     * Error message to throw if the context is `undefined`
     */
    errorMessage?: string;
    /**
     * The display name of the context
     */
    name?: string;
}
declare type CreateContextReturn<T> = [(opts: T) => void, (fallback?: T) => T];
/**
 * Creates a named context, provider, and hook.
 *
 * @param options create context options
 */
export declare function createContext<ContextType>(options?: CreateContextOptions): CreateContextReturn<ContextType>;
/**
 * Gets only the valid children of a component,
 * and ignores any nullish or falsy child.
 *
 * @param slots vue slots
 *
 * see https://github.com/vuejs/vue-next/blob/HEAD/packages/runtime-core/src/helpers/renderSlot.ts
 */
export declare function getValidChildren(slots: Slots | null): VNode[];
export interface CouldBeObjectComponent {
    setup?: FunctionConstructor;
    render?: FunctionConstructor;
}
/** Checkes whether a provided object is a component */
export declare function isObjectComponent<T extends CouldBeObjectComponent>(subject: T): boolean;
export {};
//# sourceMappingURL=vue-utils.d.ts.map