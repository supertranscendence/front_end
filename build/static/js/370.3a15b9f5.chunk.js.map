{"version":3,"file":"static/js/370.3a15b9f5.chunk.js","mappings":"gWAgBA,SAASA,EACPC,EACAC,EACAC,EACAC,EACAC,GAEA,MAAO,CAAEJ,KAAAA,EAAMC,UAAAA,EAAWC,KAAAA,EAAMC,KAAAA,EAAMC,SAAAA,EACxC,CAEA,IAAMC,EAAO,CACXN,EAAW,uCAAc,EAAM,WAAY,EAAG,GAC9CA,EAAW,6BAAc,EAAM,MAAO,EAAG,GACzCA,EAAW,kCAAS,EAAO,UAAW,EAAG,GACzCA,EAAW,UAAU,EAAO,QAAS,EAAG,IAqB3B,SAASO,IACtB,OAA0BC,EAAAA,EAAAA,MAAlBC,EAAS,EAATA,UAAa,EAAFC,GACnB,OACE,SAACC,EAAA,EAAc,CAACC,UAAWC,EAAAA,EAAM,UAC/B,UAACC,EAAA,EAAK,CAACC,GAAI,CAAEC,SAAU,KAAO,aAAW,eAAc,WACrD,SAACC,EAAA,EAAS,WACR,UAACC,EAAA,EAAQ,YACP,SAACC,EAAA,EAAS,oBACV,SAACA,EAAA,EAAS,CAACC,MAAM,OAAM,mBACvB,SAACD,EAAA,EAAS,CAACC,MAAM,QAAO,mBACxB,SAACD,EAAA,EAAS,CAACC,MAAM,QAAO,uBACxB,SAACD,EAAA,EAAS,CAACC,MAAM,gBAGrB,SAACC,EAAA,EAAS,UACPf,EAAKgB,KAAI,SAACC,GAAG,OACZ,UAACL,EAAA,EAAQ,CAEPH,GAAI,CAAE,mCAAoC,CAAES,OAAQ,IAAM,WAE1D,UAACL,EAAA,EAAS,CAACP,UAAU,KAAKa,MAAM,MAAK,UAClCF,EAAItB,MAtCpByB,EAsCwCH,EAAIrB,UApChC,GAATwB,GACK,SAACC,EAAA,EAAQ,CAACC,SAAS,UACrB,QAoCO,SAACT,EAAA,EAAS,CAACC,MAAM,OAAM,SAAEG,EAAIpB,QAC7B,UAACgB,EAAA,EAAS,CAACC,MAAM,QAAO,UAAEG,EAAInB,KAAI,IA3B/B,MA4BH,UAACe,EAAA,EAAS,CAACC,MAAM,QAAO,UAAEG,EAAIlB,SAAQ,IA3B/B,MA4BP,SAACc,EAAA,EAAS,CAACC,MAAM,QAAO,UACtB,UAACS,EAAA,EAAW,CAACC,QAAQ,WAAWC,KAAK,QAAO,WAC1C,SAACC,EAAA,EAAM,CAACC,WAAW,SAACC,EAAA,EAAc,IAAI,sBACtC,SAACF,EAAA,EAAM,CAACpB,UAAWuB,EAAAA,GAAMC,GAAE,qBAAgB3B,EAAS,sBAAqB,yBAZxEc,EAAItB,MAnCvB,IACCyB,CAiDsB,UAMvB,C,yBCgKA,EAlOgB,WAChB,OACE,0BACE,SAACW,EAAA,EAAS,CAACC,SAAS,KAAI,UACtB,UAACC,EAAA,EAAK,CAACC,QAAS,EAAE,WAChB,SAACD,EAAA,EAAK,KACN,UAACA,EAAA,EAAK,CACJE,UAAU,MACVC,eAAe,WACfC,WAAW,SACXH,QAAS,EAAE,WAEX,SAACR,EAAA,EAAM,CAACF,QAAQ,WAAWG,WAAW,SAACW,EAAA,EAAO,IAAI,uBAClD,SAACZ,EAAA,EAAM,CAACF,QAAQ,WAAWG,WAAW,SAACY,EAAA,EAAe,IAAI,4BAE5D,SAACtC,EAAS,UAiNlB,C","sources":["components/GameTable/index.tsx","pages/GameChannel/index.tsx"],"sourcesContent":["import * as React from 'react';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Paper from '@mui/material/Paper';\nimport LockIcon from '@mui/icons-material/Lock';\nimport VisibilityIcon from '@mui/icons-material/Visibility';\nimport { Button, ButtonGroup, Icon, SvgIcon } from '@mui/material';\nimport { Route, Redirect, Link, useParams } from 'react-router-dom';\n//import GameRoom from '@pages/GameRoom';\nimport loadable from '@loadable/component';\n\n\nfunction createData(\n  name: string,\n  isprivate: boolean,\n  host: string,\n  slot: number,\n  observer: number\n) {\n  return { name, isprivate, host, slot, observer};\n}\n\nconst rows = [\n  createData('헌터 1:1 초보만', true, 'jisokang', 1, 0),\n  createData('Hyopark들어와', true, 'jji', 1, 0),\n  createData('으아아아아', false, 'hyopark', 2, 4),\n  createData('Noname', false, 'gilee', 2, 4),\n];\n\nfunction isGamePrivate(\n\tprops:boolean\n){\n\tif(props == true)\n\t\treturn <LockIcon fontSize='small'/>;\n\treturn'';\n}\n\nconst moveToGameRoom = () =>\n{\n  const { workspace} = useParams<{ workspace: string;}>();\n  console.log(\"CLICK!\");\n  <Link to = {`/workspace/${workspace}/channel/GameRoom/`} />\n}\n\nconst MAX_SLOT = 2;\nconst MAX_OBSERVER = 4;\n\nexport default function GameTable() {\n  const { workspace, id } = useParams<{ workspace: string; id: string }>();\n  return (\n    <TableContainer component={Paper}>\n      <Table sx={{ minWidth: 650 }} aria-label=\"simple table\">\n        <TableHead>\n          <TableRow>\n            <TableCell>Room</TableCell>\n            <TableCell align=\"left\">Host</TableCell>\n            <TableCell align=\"right\">Slot</TableCell>\n            <TableCell align=\"right\">Observer</TableCell>\n            <TableCell align=\"right\"></TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {rows.map((row) => (\n            <TableRow\n              key={row.name}\n              sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\n            >\n              <TableCell component=\"th\" scope=\"row\">\n                {row.name}{isGamePrivate(row.isprivate)}\n              </TableCell>\n              <TableCell align=\"left\">{row.host}</TableCell>\n              <TableCell align=\"right\">{row.slot}/{MAX_SLOT}</TableCell>\n              <TableCell align=\"right\">{row.observer}/{MAX_OBSERVER}</TableCell>\n              <TableCell align=\"right\">\n                <ButtonGroup variant=\"outlined\" size='small'>\n                  <Button startIcon={<VisibilityIcon />}>Observe</Button>\n                  <Button component={Link} to={`/workspace/${workspace}/channel/GameRoom/`}>Join</Button>\n                </ButtonGroup>\n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n}\n","import ChatBox from '../../components/ChatBox';\nimport ChatList from '../../components/ChatList';\nimport InviteChannelModal from '../../components/InviteChannelModal';\nimport useInput from '../../hooks/useInput';\nimport useSocket from '../../hooks/useSocket';\nimport { Header, DragOver } from '../Channel/styles';\nimport { IChannel, IChat, IUser } from '../../typings/db';\nimport fetcher from '../../utils/fetcher';\nimport makeSection from '../../utils/makeSection';\nimport axios from 'axios';\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { Scrollbars } from 'react-custom-scrollbars-2';\nimport { useParams } from 'react-router';\nimport { Redirect } from 'react-router-dom';\nimport { toast, ToastContainer } from 'react-toastify';\nimport useSWR from 'swr';\nimport useSWRInfinite from 'swr/infinite';\nimport { Button, Container, Grid, Stack, Divider } from '@mui/material';\nimport GameTable from '../../components/GameTable';\nimport AddIcon from '@mui/icons-material/Add';\nimport EmojiEventsIcon from '@mui/icons-material/EmojiEvents';\n\n//const PAGE_SIZE = 20;\nconst Channel = () => {\nreturn(\n  <div>\n    <Container maxWidth=\"lg\">\n      <Stack spacing={2}>\n        <Stack />\n        <Stack\n          direction=\"row\"\n          justifyContent=\"flex-end\"\n          alignItems=\"center\"\n          spacing={1}\n        >\n          <Button variant=\"outlined\" startIcon={<AddIcon />}>New Game</Button>\n          <Button variant=\"outlined\" startIcon={<EmojiEventsIcon />}>Find Match</Button>\n        </Stack>\n        <GameTable />\n      </Stack>\n    </Container>\n  </div>\n);\n  // const { workspace, channel } = useParams<{ workspace: string; channel: string }>();\n  // const [socket] = useSocket(workspace);\n  // const { data: userData } = useSWR<IUser>('http://localhost:3095/api/users', fetcher);\n  // const { data: channelsData } = useSWR<IChannel[]>(`http://localhost:3095/api/workspaces/${workspace}/channels`, fetcher);\n  // const channelData = channelsData?.find((v) => v.name === channel);\n  // const {\n  //   data: chatData,\n  //   mutate: mutateChat,\n  //   setSize,\n  // } = useSWRInfinite<IChat[]>(\n  //   (index) => `http://localhost:3095/api/workspaces/${workspace}/channels/${channel}/chats?perPage=${PAGE_SIZE}&page=${index + 1}`,\n  //   fetcher,\n  //   {\n  //     onSuccess(data) {\n  //       if (data?.length === 1) {\n  //         setTimeout(() => {\n  //           scrollbarRef.current?.scrollToBottom();\n  //         }, 100);\n  //       }\n  //     },\n  //   },\n  // );\n  // const { data: channelMembersData } = useSWR<IUser[]>(\n  //   userData ? `http://localhost:3095/api/workspaces/${workspace}/channels/${channel}/members` : null,\n  //   fetcher,\n  // );\n  // const [chat, onChangeChat, setChat] = useInput('');\n  // const [showInviteChannelModal, setShowInviteChannelModal] = useState(false);\n  // const scrollbarRef = useRef<Scrollbars>(null);\n  // const [dragOver, setDragOver] = useState(false);\n\n  // const isEmpty = chatData?.[0]?.length === 0;\n  // const isReachingEnd = isEmpty || (chatData && chatData[chatData.length - 1]?.length < PAGE_SIZE);\n\n  // const onCloseModal = useCallback(() => {\n  //   setShowInviteChannelModal(false);\n  // }, []);\n\n  // const onSubmitForm = useCallback(\n  //   (e) => {\n  //     e.preventDefault();\n  //     if (chat?.trim() && chatData && channelData && userData) {\n  //       const savedChat = chat;\n  //       mutateChat((prevChatData) => {\n  //         prevChatData?.[0].unshift({\n  //           id: (chatData[0][0]?.id || 0) + 1,\n  //           content: savedChat,\n  //           UserId: userData.id,\n  //           User: userData,\n  //           createdAt: new Date(),\n  //           ChannelId: channelData.id,\n  //           Channel: channelData,\n  //         });\n  //         return prevChatData;\n  //       }, false).then(() => {\n  //         localStorage.setItem(`${workspace}-${channel}`, new Date().getTime().toString());\n  //         setChat('');\n  //         if (scrollbarRef.current) {\n  //           console.log('scrollToBottom!', scrollbarRef.current?.getValues());\n  //           scrollbarRef.current.scrollToBottom();\n  //         }\n  //       });\n  //       axios\n  //         .post(`http://localhost:3095/api/workspaces/${workspace}/channels/${channel}/chats`, {\n  //           content: savedChat,\n  //         })\n  //         .catch(console.error);\n  //     }\n  //   },\n  //   [chat, workspace, channel, channelData, userData, chatData, mutateChat, setChat],\n  // );\n\n  // const onMessage = useCallback(\n  //   (data: IChat) => {\n  //     if (\n  //       data.Channel.name === channel &&\n  //       (data.content.startsWith('uploads\\\\') || data.content.startsWith('uploads/') || data.UserId !== userData?.id)\n  //     ) {\n  //       mutateChat((chatData) => {\n  //         chatData?.[0].unshift(data);\n  //         return chatData;\n  //       }, false).then(() => {\n  //         if (scrollbarRef.current) {\n  //           if (\n  //             scrollbarRef.current.getScrollHeight() <\n  //             scrollbarRef.current.getClientHeight() + scrollbarRef.current.getScrollTop() + 150\n  //           ) {\n  //             console.log('scrollToBottom!', scrollbarRef.current?.getValues());\n  //             setTimeout(() => {\n  //               scrollbarRef.current?.scrollToBottom();\n  //             }, 100);\n  //           } else {\n  //             toast.success('새 메시지가 도착했습니다.', {\n  //               onClick() {\n  //                 scrollbarRef.current?.scrollToBottom();\n  //               },\n  //               closeOnClick: true,\n  //             });\n  //           }\n  //         }\n  //       });\n  //     }\n  //   },\n  //   [channel, userData, mutateChat],\n  // );\n\n  // useEffect(() => {\n  //   socket?.on('message', onMessage);\n  //   return () => {\n  //     socket?.off('message', onMessage);\n  //   };\n  // }, [socket, onMessage]);\n\n  // useEffect(() => {\n  //   localStorage.setItem(`${workspace}-${channel}`, new Date().getTime().toString());\n  // }, [workspace, channel]);\n\n  // const onClickInviteChannel = useCallback(() => {\n  //   setShowInviteChannelModal(true);\n  // }, []);\n\n  // const onDrop = useCallback(\n  //   (e) => {\n  //     e.preventDefault();\n  //     console.log(e);\n  //     const formData = new FormData();\n  //     if (e.dataTransfer.items) {\n  //       // Use DataTransferItemList interface to access the file(s)\n  //       for (let i = 0; i < e.dataTransfer.items.length; i++) {\n  //         // If dropped items aren't files, reject them\n  //         console.log(e.dataTransfer.items[i]);\n  //         if (e.dataTransfer.items[i].kind === 'file') {\n  //           const file = e.dataTransfer.items[i].getAsFile();\n  //           console.log(e, '.... file[' + i + '].name = ' + file.name);\n  //           formData.append('image', file);\n  //         }\n  //       }\n  //     } else {\n  //       // Use DataTransfer interface to access the file(s)\n  //       for (let i = 0; i < e.dataTransfer.files.length; i++) {\n  //         console.log(e, '... file[' + i + '].name = ' + e.dataTransfer.files[i].name);\n  //         formData.append('image', e.dataTransfer.files[i]);\n  //       }\n  //     }\n  //     axios.post(`http://localhost:3095/api/workspaces/${workspace}/channels/${channel}/images`, formData).then(() => {\n  //       setDragOver(false);\n  //       localStorage.setItem(`${workspace}-${channel}`, new Date().getTime().toString());\n  //     });\n  //   },\n  //   [workspace, channel],\n  // );\n\n  // const onDragOver = useCallback((e) => {\n  //   e.preventDefault();\n  //   console.log(e);\n  //   setDragOver(true);\n  // }, []);\n\n  // if (channelsData && !channelData) {\n  //   return <Redirect to={`/workspace/${workspace}/channel/일반`} />;\n  // }\n\n  // const chatSections = makeSection(chatData ? ([] as IChat[]).concat(...chatData).reverse() : []);\n\n  // return (\n  //   <Container onDrop={onDrop} onDragOver={onDragOver}>\n  //     <Header>\n  //       <span>#{channel}</span>\n  //       <div style={{ display: 'flex', flex: 1, justifyContent: 'flex-end', alignItems: 'center' }}>\n  //         <span>{channelMembersData?.length}</span>\n  //         <button\n  //           onClick={onClickInviteChannel}\n  //           className=\"c-button-unstyled p-ia__view_header__button\"\n  //           aria-label=\"Add people to #react-native\"\n  //           data-sk=\"tooltip_parent\"\n  //           type=\"button\"\n  //         >\n  //           <i className=\"c-icon p-ia__view_header__button_icon c-icon--add-user\" aria-hidden=\"true\" />\n  //         </button>\n  //       </div>\n  //     </Header>\n  //     <ChatList\n  //       scrollbarRef={scrollbarRef}\n  //       isReachingEnd={isReachingEnd}\n  //       isEmpty={isEmpty}\n  //       chatSections={chatSections}\n  //       setSize={setSize}\n  //     />\n  //     <ChatBox\n  //       onSubmitForm={onSubmitForm}\n  //       chat={chat}\n  //       onChangeChat={onChangeChat}\n  //       placeholder={`Message #${channel}`}\n  //       data={channelMembersData}\n  //     />\n  //     <InviteChannelModal\n  //       show={showInviteChannelModal}\n  //       onCloseModal={onCloseModal}\n  //       setShowInviteChannelModal={setShowInviteChannelModal}\n  //     />\n  //     <ToastContainer position=\"bottom-center\" />\n  //     {dragOver && <DragOver>업로드!</DragOver>}\n  //   </Container>\n  // );\n};\n\nexport default Channel;\n"],"names":["createData","name","isprivate","host","slot","observer","rows","GameTable","useParams","workspace","id","TableContainer","component","Paper","Table","sx","minWidth","TableHead","TableRow","TableCell","align","TableBody","map","row","border","scope","props","Lock","fontSize","ButtonGroup","variant","size","Button","startIcon","Visibility","Link","to","Container","maxWidth","Stack","spacing","direction","justifyContent","alignItems","Add","EmojiEvents"],"sourceRoot":""}