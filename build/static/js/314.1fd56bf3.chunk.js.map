{"version":3,"file":"static/js/314.1fd56bf3.chunk.js","mappings":"uJA+KA,UA5JsB,WAmIpB,OAAQ,mCAuBV,C","sources":["pages/ChatRoom/index.tsx"],"sourcesContent":["import ChatBox from '../../components/ChatBox';\nimport ChatList from '../../components/ChatList';\nimport useInput from '../../hooks/useInput';\nimport useSocket from '../../hooks/useSocket';\nimport { DragOver } from '../Channel/styles';\nimport { Header, Container } from '../DirectMessage/styles';\nimport { IDM } from '../../typings/db';\nimport fetcher from '../../utils/fetcher';\nimport makeSection from '../../utils/makeSection';\nimport axios from 'axios';\nimport gravatar from 'gravatar';\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { Scrollbars } from 'react-custom-scrollbars-2';\nimport { useParams } from 'react-router';\nimport { toast } from 'react-toastify';\nimport useSWR from 'swr';\nimport useSWRInfinite from 'swr/infinite';\n\nconst PAGE_SIZE = 20;\nconst DirectMessage = () => {\n  // const { workspace, id } = useParams<{ workspace: string; id: string }>();\n  // const [socket] = useSocket(workspace);\n  // const { data: myData } = useSWR('/api/users', fetcher);\n  // const { data: userData } = useSWR(`/api/workspaces/${workspace}/users/${id}`, fetcher);\n  // const [chat, onChangeChat, setChat] = useInput('');\n  // const scrollbarRef = useRef<Scrollbars>(null);\n  // const [dragOver, setDragOver] = useState(false);\n\n  // const isEmpty = chatData?.[0]?.length === 0;\n  // const isReachingEnd = isEmpty || (chatData && chatData[chatData.length - 1]?.length < PAGE_SIZE);\n\n  // const onSubmitForm = useCallback(\n  //   (e:any) => {\n  //     e.preventDefault();\n  //     if (chat?.trim() && chatData) {\n  //       const savedChat = chat;\n  //       mutateChat((prevChatData) => {\n  //         prevChatData?.[0].unshift({\n  //           id: (chatData[0][0]?.id || 0) + 1,\n  //           content: savedChat,\n  //           SenderId: myData.id,\n  //           Sender: myData,\n  //           ReceiverId: userData.id,\n  //           Receiver: userData,\n  //           createdAt: new Date(),\n  //         });\n  //         return prevChatData;\n  //       }, false).then(() => {\n  //         localStorage.setItem(`${workspace}-${id}`, new Date().getTime().toString());\n  //         setChat('');\n  //         if (scrollbarRef.current) {\n  //           console.log('scrollToBottom!', scrollbarRef.current?.getValues());\n  //           scrollbarRef.current.scrollToBottom();\n  //         }\n  //       });\n  //       axios\n  //         .post(`/api/workspaces/${workspace}/dms/${id}/chats`, {\n  //           content: chat,\n  //         })\n  //         .catch(console.error);\n  //     }\n  //   },\n  //   [chat, workspace, id, myData, userData, chatData, mutateChat, setChat],\n  // );\n\n  // const onMessage = useCallback(\n  //   (data: IDM) => {\n  //     if (data.SenderId === Number(id) && myData.id !== Number(id)) {\n  //       mutateChat((chatData) => {\n  //         chatData?.[0].unshift(data);\n  //         return chatData;\n  //       }, false).then(() => {\n  //         if (scrollbarRef.current) {\n  //           if (\n  //             scrollbarRef.current.getScrollHeight() <\n  //             scrollbarRef.current.getClientHeight() + scrollbarRef.current.getScrollTop() + 150\n  //           ) {\n  //             console.log('scrollToBottom!', scrollbarRef.current?.getValues());\n  //             setTimeout(() => {\n  //               scrollbarRef.current?.scrollToBottom();\n  //             }, 100);\n  //           } else {\n  //             toast.success('새 메시지가 도착했습니다.', {\n  //               onClick() {\n  //                 scrollbarRef.current?.scrollToBottom();\n  //               },\n  //               closeOnClick: true,\n  //             });\n  //           }\n  //         }\n  //       });\n  //     }\n  //   },\n  //   [id, myData, mutateChat],\n  // );\n\n  // useEffect(() => {\n  //   socket?.on('dm', onMessage);\n  //   return () => {\n  //     socket?.off('dm', onMessage);\n  //   };\n  // }, [socket, onMessage]);\n\n  // useEffect(() => {\n  //   localStorage.setItem(`${workspace}-${id}`, new Date().getTime().toString());\n  // }, [workspace, id]);\n\n  // const onDrop = useCallback(\n  //   (e:any) => {\n  //     e.preventDefault();\n  //     console.log(e);\n  //     const formData = new FormData();\n  //     if (e.dataTransfer.items) {\n  //       // Use DataTransferItemList interface to access the file(s)\n  //       for (let i = 0; i < e.dataTransfer.items.length; i++) {\n  //         // If dropped items aren't files, reject them\n  //         if (e.dataTransfer.items[i].kind === 'file') {\n  //           const file = e.dataTransfer.items[i].getAsFile();\n  //           console.log('... file[' + i + '].name = ' + file.name);\n  //           formData.append('image', file);\n  //         }\n  //       }\n  //     } else {\n  //       // Use DataTransfer interface to access the file(s)\n  //       for (let i = 0; i < e.dataTransfer.files.length; i++) {\n  //         console.log('... file[' + i + '].name = ' + e.dataTransfer.files[i].name);\n  //         formData.append('image', e.dataTransfer.files[i]);\n  //       }\n  //     }\n  //     axios.post(`/api/workspaces/${workspace}/dms/${id}/images`, formData).then(() => {\n  //       setDragOver(false);\n  //       localStorage.setItem(`${workspace}-${id}`, new Date().getTime().toString());\n  //       mutateChat();\n  //     });\n  //   },\n  //   [workspace, id, mutateChat],\n  // );\n\n  // const onDragOver = useCallback((e:any) => {\n  //   e.preventDefault();\n  //   console.log(e);\n  //   setDragOver(true);\n  // }, []);\n\n  // if (!userData || !myData) {\n  //   return null;\n  // }\n\n  // const chatSections = makeSection(chatData ? ([] as IDM[]).concat(...chatData).reverse() : []);\n\n  return (<div>asdasd</div>\n    // <Container onDrop={onDrop} onDragOver={onDragOver}>\n    //   <Header>\n    //     <img src={gravatar.url(userData.email, { s: '24px', d: 'retro' })} alt={userData.nickname} />\n    //     <span>{userData.nickname}</span>\n    //   </Header>\n    //   <ChatList\n    //     scrollbarRef={scrollbarRef}\n    //     isReachingEnd={isReachingEnd}\n    //     isEmpty={isEmpty}\n    //     chatSections={chatSections}\n    //     setSize={setSize}\n    //   />\n    //   <ChatBox\n    //     onSubmitForm={onSubmitForm}\n    //     chat={chat}\n    //     onChangeChat={onChangeChat}\n    //     placeholder={`Message ${userData.nickname}`}\n    //     data={[]}\n    //   />\n    //   {dragOver && <DragOver>업로드!</DragOver>}\n    // </Container>\n  );\n};\n\nexport default DirectMessage;\n"],"names":[],"sourceRoot":""}